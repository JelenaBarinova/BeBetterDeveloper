<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Be a Better Developer</title>
    <description>Practical notes on development</description>
    <link>http://www.bebetterdeveloper.com/</link>
    <atom:link href="http://www.bebetterdeveloper.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 21 Nov 2015 12:13:26 -0800</pubDate>
    <lastBuildDate>Sat, 21 Nov 2015 12:13:26 -0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Creating multilingual website w/ React &amp; Flux</title>
        <description>&lt;p&gt;My post on &lt;a href=&quot;http://www.bebetterdeveloper.com/coding/getting-started-react-mocha.html&quot;&gt;Getting started w/ React &amp;amp; Mocha&lt;/a&gt; just made it up to the Top 1 of all my blog posts, reaching 1000 uniqueue views, so I decided to continue these series.
&lt;img src=&quot;/img/post_img/rfe-1.png&quot; alt=&quot;React and Flux logo&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-target&quot;&gt;My target&lt;/h2&gt;

&lt;p&gt;This time I want to create a simple multilingual website. I need to have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;source structure and process suitable for mid-sized project&lt;/li&gt;
  &lt;li&gt;fast update of UI on language change (desirably without page refresh)&lt;/li&gt;
  &lt;li&gt;easy testable solution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll use ES6 where it is suitable, I automate dev process using Gulp.&lt;/p&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;

&lt;p&gt;This is how the final result looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post_img/out.gif&quot; alt=&quot;Switch language&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Working code in &lt;a href=&quot;https://github.com/JelenaBarinova/react-flux-example&quot;&gt;GitHub&lt;/a&gt;.
To check the website, follow this &lt;a href=&quot;http://jelenabarinova.github.io/react-flux-example/&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;tl;dr&lt;/h2&gt;

&lt;p&gt;Just download the code and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using Visual Studio Code - you can build it using &lt;code&gt;⇧⌘B&lt;/code&gt; (on Mac), otherwise use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$gulp build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run a server locally I use &lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;http-server&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$http-server -a localhost -p 8000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For those, who are in a hurry to get started with Flux you can skip all preparation steps and go straight to &lt;a href=&quot;/coding/getting-started-react-flux.html#step-4-flux&quot;&gt;Using Flux&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;my-actions&quot;&gt;My actions&lt;/h2&gt;

&lt;p&gt;To create this multilingual website I followed these steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/coding/getting-started-react-flux.html#step-1-simple-html&quot;&gt;Created simple HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/coding/getting-started-react-flux.html#step-2-react-components&quot;&gt;Created React components with hardcoded content&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/coding/getting-started-react-flux.html#step-3-content-from-json&quot;&gt;Moved content to JSON&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/coding/getting-started-react-flux.html#step-4-flux&quot;&gt;Used Flux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/coding/getting-started-react-flux.html#step-5-refactoring-and-tests&quot;&gt;Made some refactoring and add tetst&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-1-simple-html&quot;&gt;Step 1. Simple HTML&lt;/h2&gt;

&lt;p&gt;So I started by creating my website as a simple HTML, using Bootstrap, to have the basic static page structure, which I could split to the React components later. That’s how my &lt;em&gt;index.html&lt;/em&gt; look like:
&lt;style type=&quot;text/css&quot;&gt;
  .gist {width:640px !important;}
  .gist-file
  .gist-data {max-height: 600px; max-width: 640px;}
&lt;/style&gt;
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/82dbb2570f81395bc2f6.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2-react-components&quot;&gt;Step 2. React components&lt;/h2&gt;

&lt;p&gt;First I installed React and ReactDOM.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$npm install react react-dom --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I prepared everything that is needed for jsx and ES2015 transformations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$npm install babel gulp browserify vinyl-source-stream babelify babel-preset-es2015 babel-preset-react --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Babel to transform React files and ES2015 - created &lt;em&gt;.babelrc&lt;/em&gt; file with these settings:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/1303d2f6a01a35ff01e9.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Created gulp file with a build task. Here it is:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/7f6e5e6945a89a6f17a6.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Now moving to React. In my page I identify three components:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Menu&lt;/li&gt;
  &lt;li&gt;Home section&lt;/li&gt;
  &lt;li&gt;About section&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I created these three components, adding additional one to wrap these three. In this step I added everything in one file &lt;em&gt;app.jsx&lt;/em&gt; (will refactor it in further steps). So my &lt;em&gt;app.jsx&lt;/em&gt; file looks like this:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/7244d61616f3427a8673.js&quot;&gt;&lt;/script&gt;
Note: when using html in React don’t forget to rename class to className.&lt;/p&gt;

&lt;p&gt;Added a placeholder for my react components instead of all the html tags in my &lt;em&gt;index.html&lt;/em&gt; and added refference to react and react-dom libraries as well as to my app.js file, which is being produced for me after running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$gulp build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or &lt;code&gt;⇧⌘B&lt;/code&gt; (in VSCode on Mac).&lt;/p&gt;

&lt;p&gt;So my &lt;em&gt;index.html&lt;/em&gt; now is this:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/e0a7a419f161aa7d8362.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;browse files in GitHub at &lt;a href=&quot;https://github.com/JelenaBarinova/react-flux-example/tree/b4f1d2557efaa593f4dd4558fae75ec3db884da5&quot;&gt;this point&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-3-content-from-json&quot;&gt;Step 3. Content from JSON&lt;/h2&gt;

&lt;p&gt;What I decided to do now is to move all the content text to JSON file and load the text I have created helper API. The main idea behind this is that later this loading from JSON could be replaced by calling real API to retrieve needed data.&lt;/p&gt;

&lt;p&gt;This is how my data &lt;em&gt;content.json&lt;/em&gt; file looks like:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/8e0a8f5e3a09b2794ec5.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This is my helper API, which load JSON into array and then returns it filtered by language.
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/aa9ed4e4afcaaa8b80ff.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;So now I update my React components to use text from my API. I decided to call API method from my wrapper component and then pass down needed parts to child components via &lt;em&gt;props&lt;/em&gt;. This is my app.jsx:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/279de096b29d412f5b70.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;In addition I appended &lt;em&gt;gulpfile.js&lt;/em&gt; with new task to delete previously generated &lt;em&gt;app.js&lt;/em&gt; file. This is how gulpfile.js looks like now:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/be4c3e8dbe599fe06996.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;For this I needed to install del library:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$npm install del --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;step-4-flux&quot;&gt;Step 4. Flux&lt;/h2&gt;

&lt;p&gt;So finaly, all preparation tasks are done and we can move forward and add Flux.
First let’s start with installation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$npm install flux --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I follow the flow that is being recommended by Flux:
&lt;img src=&quot;https://facebook.github.io/flux/img/flux-simple-f8-diagram-with-client-action-1300w.png&quot; alt=&quot;Flux flow&quot; class=&quot;right&quot; /&gt;
Picture is taken from &lt;a href=&quot;https://facebook.github.io/flux/docs/overview.html#content&quot;&gt;Flux manual&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s map this diagram items with my code. So starting from left to right, I’ve got two actions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;initApp - I call this in my app entry point to load content using default language ‘en’ (I say it’s an action on the left, very first box in the diagram)&lt;/li&gt;
  &lt;li&gt;switchLanguage - I dispatch this action on click in language menu (I say it’s an action above the Store on the diagram)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My &lt;em&gt;actions.js&lt;/em&gt; file:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/cded3bd3a79e1466029b.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Then I have a dispatcher:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/8c7a5114b7f5341077b8.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;In my store I hold the content and register some callbacks with dispatcher to be invoked on specific actions. My &lt;em&gt;store.js&lt;/em&gt; file:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/f1c17fa8bad12f7bc5f7.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And last, but not least - view. So here I have two components that are related to this flow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Menu component - invokes SWITCH_LANGUAGE action on menu item click and passes selected language (this covers View -&amp;gt; Action -&amp;gt; Dispatcher -&amp;gt; Store loop on the diagram)&lt;/li&gt;
  &lt;li&gt;Page component - listens to the store changes and when change is happening - gets updated content (this covers Upper Action -&amp;gt; Dispatcher -&amp;gt; Store -&amp;gt; View loop on the diagram).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is my updated Menu component:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/51022402974b0f06b70e.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And here it is my Page compoenent:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/5cac4ff430e13622c42f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4-refactoring-and-tests&quot;&gt;Step 4. Refactoring and Tests&lt;/h2&gt;

&lt;p&gt;I won’t be giving any detaled instruction here, but what I did - is refactored my code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Changed source file structure&lt;/li&gt;
  &lt;li&gt;Split react components to different files&lt;/li&gt;
  &lt;li&gt;Added minification step to the gulp task&lt;/li&gt;
  &lt;li&gt;Now working on tests, and I think, that they deserve a separate blog post.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The final version of this example may be found on &lt;a href=&quot;https://github.com/JelenaBarinova/react-flux-example&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I just love how it works you can experience this smooth language change &lt;a href=&quot;http://jelenabarinova.github.io/react-flux-example/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Nov 2015 00:00:00 -0800</pubDate>
        <link>http://www.bebetterdeveloper.com/coding/getting-started-react-flux.html</link>
        <guid isPermaLink="true">http://www.bebetterdeveloper.com/coding/getting-started-react-flux.html</guid>
        
        <category>JavaScript</category>
        
        <category>React</category>
        
        <category>Gulp</category>
        
        <category>ES2015</category>
        
        <category>Flux</category>
        
        <category>multilingual</category>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Hello world, Python</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/post_img/python-logo.png&quot; alt=&quot;Python&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Today I started exploring Python. For those who know me - Yes, Python! Bear with me - I’ve got my solid reasons for that (will share it one day).&lt;/p&gt;

&lt;p&gt;In this short blog post I just want to share how I setup my IDE - &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; on MacOS to handle my Python adventure.&lt;/p&gt;

&lt;p&gt;First, I’ve installed &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, created &lt;code&gt;app.py&lt;/code&gt; file with “hello world” code in it and setup VSCode task to run this script, as so: &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;From a Command pallete (&lt;code&gt;⇧⌘P&lt;/code&gt;) hit “Configure Task Runner”. &lt;/li&gt;
  &lt;li&gt;In a &lt;code&gt;task.json&lt;/code&gt; file added this:&lt;/li&gt;
&lt;/ol&gt;

&lt;script src=&quot;https://gist.github.com/JelenaBarinova/1afd44a8470a511bc5ad.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You should change python command path (if not default as mine) as well as &lt;code&gt;args&lt;/code&gt; according to your setup, I just simply have my whole script in &lt;code&gt;app.py&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Finally, as this is the only task in my VSCode tasks list - it runs on &lt;code&gt;⇧⌘B&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Simple as that!&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Oct 2015 00:00:00 -0700</pubDate>
        <link>http://www.bebetterdeveloper.com/coding/hello-world-python.html</link>
        <guid isPermaLink="true">http://www.bebetterdeveloper.com/coding/hello-world-python.html</guid>
        
        <category>Python</category>
        
        <category>VSCode</category>
        
        <category>Visual Studio Code</category>
        
        <category>IDE</category>
        
        <category>Mac OS</category>
        
        <category>dev environment</category>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Sharing a blog post hosted on GitHub Pages</title>
        <description>&lt;p&gt;I am hosting all of my personal blogs on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; now (here are some reasons why: &lt;a href=&quot;http://bebetterleader.com/coding/why-did-i-go-static.html&quot;&gt;‘Static HTML is the new black’&lt;/a&gt;). With it comes a challenge when I try to share new posts on social media.&lt;/p&gt;

&lt;p&gt;I want to have a nice share dialog with description and image of my blog post. Like so:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post_img/fbog-share-dialog.png&quot; alt=&quot;Share dialog&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to achive this, I had to add some code to my Jekyll templates and implement some workarounds with urls and domain configuration. That’s how I did it.&lt;/p&gt;

&lt;p&gt;First, I added meta tag generation to a head part of my post html:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/c63a40854bcd0569a9a6.js&quot;&gt;&lt;/script&gt; &lt;/p&gt;

&lt;p&gt;I get all the open graph meta tags being generated as FB and other social media systems expect it to: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/JelenaBarinova/1ef9ae8a8322e3397051.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;But once I try to share my blog post or scrape url with &lt;a href=&quot;https://developers.facebook.com/tools/debug/og/object/&quot;&gt;Open Graph Object Debugger&lt;/a&gt; I get &lt;code&gt;Error parsing input URL, no data was cached, or no data was scraped.&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post_img/fbog-error.png&quot; alt=&quot;Error parsing input URL, no data was cached, or no data was scraped.&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After spending some time searching for the reasons why this is happening, I found that, Github sometimes return a 302 (Redirect status code) instead of a 200 (OK) in order to avoid DDoS attacks. Same issue is described in this &lt;a href=&quot;http://www.rovrov.com/blog/2014/11/11/github-pages-302-redirect/&quot;&gt;blog post&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;To fix it, in addition to GitHub’s IPs I’ve added &lt;code&gt;www&lt;/code&gt; subdomain through &lt;code&gt;CNAME&lt;/code&gt; pointing to my GitHub address &lt;code&gt;jelenabarinova.github.io&lt;/code&gt; in my domain configuration. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post_img/fbog-domain-config.png&quot; alt=&quot;Domain configuration&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now I use url with &lt;code&gt;www&lt;/code&gt; prefix when I want to share my blog post on social media and it works just fine - I get desirable share dialog: &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post_img/fbog-fixed.png&quot; alt=&quot;Scraper works&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this workaround I can share my posts using nice summary and image in a share dialog.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;update-10172015&quot;&gt;Update 10/17/2015&lt;/h4&gt;

&lt;p&gt;By the way in my &lt;code&gt;gh-pages&lt;/code&gt; branch on a GitHub I have &lt;code&gt;CNAME&lt;/code&gt; configured using subdomain + domain, like this: &lt;code&gt;www.bebetterdeveloper.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post_img/fblog-cname.png&quot; alt=&quot;CNAME&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Aug 2015 00:00:00 -0700</pubDate>
        <link>http://www.bebetterdeveloper.com/deployment/sharing-a-blog-post-hosted-on-github-pages.html</link>
        <guid isPermaLink="true">http://www.bebetterdeveloper.com/deployment/sharing-a-blog-post-hosted-on-github-pages.html</guid>
        
        <category>gh-pages</category>
        
        <category>Jekyll</category>
        
        <category>open graph meta tags</category>
        
        <category>Error parsing input URL</category>
        
        <category>fb debugger</category>
        
        <category>social sharing</category>
        
        
        <category>deployment</category>
        
      </item>
    
      <item>
        <title>Getting started w/ React &amp; Mocha</title>
        <description>&lt;p&gt;It took me half day to setup [almost] empty environment for React app development with testing done using Mocha. 
I decided to share my findings here so it would remain. 
&lt;img src=&quot;/img/post_img/vfd-react-mocha.png&quot; alt=&quot;React and Mocha logo&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;my-target&quot;&gt;My target&lt;/h2&gt;
&lt;p&gt;I wanted to create an environment for further React development. The things that I needed to have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;source structure, that would be suitable for medium-sized project&lt;/li&gt;
  &lt;li&gt;build scripts, that would do all needed transformations, run tests, show the output of my app&lt;/li&gt;
  &lt;li&gt;Mocha as a test framework of choice &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For build scripts I prefer to use gulp.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;You can find working code &lt;a href=&quot;https://github.com/JelenaBarinova/VeryFirstDiv&quot;&gt;here&lt;/a&gt;. Just download it and run &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;followed by &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$npm test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are using Visual Studio Code - you can build it using &lt;code&gt;⇧⌘B&lt;/code&gt; (on Mac).  &lt;/p&gt;

&lt;h2 id=&quot;how-i-did-it&quot;&gt;How I did it&lt;/h2&gt;
&lt;p&gt;I started with these three stages:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Prepare the environment&lt;/li&gt;
  &lt;li&gt;Create first React component&lt;/li&gt;
  &lt;li&gt;Add Mocha tests&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-1-prepare-the-environment&quot;&gt;Step 1. Prepare the environment&lt;/h2&gt;
&lt;p&gt;First install &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; (if you don’t have it yet).
In your project directory (&lt;em&gt;VeryFirstDiv&lt;/em&gt; in my case) create &lt;em&gt;package.json&lt;/em&gt; file, containing these settings:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/31ce415a9beac855c75e.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;To download and install all needed dependences open a terminal and run: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create &lt;em&gt;index.html&lt;/em&gt; file:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/65ee857afca288768cb6.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Create &lt;em&gt;gulpfile.js&lt;/em&gt; to configure build steps:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/143d0b90f977e60184fa.js&quot;&gt;&lt;/script&gt;
I’m using &lt;a href=&quot;https://www.npmjs.com/package/gulp-load-plugins&quot;&gt;gulp-load-plugins&lt;/a&gt; for easy and fast use of different gulp plugins. It enables me to access all the plugins I have listed in package.json file without ‘require’ each of them separately. &lt;/p&gt;

&lt;p&gt;Run buil command: either using &lt;code&gt;⇧⌘B&lt;/code&gt; (from Visual Studio Code on Mac) or command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$gulp build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you should get Chrome opened with very first version of our app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post_img/vfd-1.png&quot; alt=&quot;First step result&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-2-create-first-react-component&quot;&gt;Step 2. Create first React component&lt;/h2&gt;
&lt;p&gt;Create a &lt;em&gt;components&lt;/em&gt; directory and &lt;em&gt;component.jsx&lt;/em&gt; file in it:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/8a04f9f62934b4773b5d.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Add this componenet to DOM (I did it in &lt;em&gt;app.jsx&lt;/em&gt; file in my project root directroy &lt;em&gt;VeryFirstDiv&lt;/em&gt;)
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/2d3096930e0f739ab7e5.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Add aditional step ‘browserify’ in build process to have “require(‘modules’)” in browser. I use &lt;a href=&quot;https://www.npmjs.com/package/gulp-browserify&quot;&gt;gulp-browserify&lt;/a&gt; module. This is our &lt;em&gt;gulpfile.js&lt;/em&gt; with new ‘browserify’ step added:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/912880187a6b55b83b5d.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Run build task and we can see our React component in a browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post_img/vfd-2.png&quot; alt=&quot;Second step result&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-3-adding-first-mocha-test&quot;&gt;Step 3. Adding first Mocha test&lt;/h2&gt;
&lt;p&gt;This was the trickiest step for me. I found a couple of good articles on the topic. These are my favourite:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jesstelford/react-isomorphic-boilerplate&quot;&gt;Isomorphic Server &amp;amp; Browser Side Rendering with React (in 3 parts)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hammerlab.org/2015/02/14/testing-react-web-apps-with-mocha/&quot;&gt;Testing React Web Apps with Mocha (in 2 parts)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.asbjornenge.com/wwc/testing_react_components.html&quot;&gt;Testing React Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, let’s begin.
First, we need to install &lt;a href=&quot;http://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;. There are two ways you can do it (apply same instructions to futher installations as well): you can either install needed module from command line, for example &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$npm install mocha
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or add it to &lt;em&gt;package.json&lt;/em&gt; dependencies list and run &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I prefer the second option, this way you keep track of all used modules and if needed you can install all dependences from zero. &lt;/p&gt;

&lt;p&gt;Create test directory and a first &lt;em&gt;empty-test.js&lt;/em&gt;, which just asserts true all the time.
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/a5a34db9c6a9cf8ccb38.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;You can try whether it works just running Mocha from command line from you project root folder: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$mocha
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You shoud get this output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post_img/vfd-3.png&quot; alt=&quot;Third step result&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s add test running step in our gulp configuration.
For this I used &lt;a href=&quot;https://www.npmjs.com/package/gulp-shell&quot;&gt;gulp-shell&lt;/a&gt; - a command line interface for gulp.&lt;/p&gt;

&lt;p&gt;Now add a new ‘test’ step in &lt;em&gt;gulpfile.js&lt;/em&gt; to run mocha:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/7d65aec1091f2ded3063.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Before moving on to testing our React component, we need to take care of couple of things.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt; - DOM mocking. You can find very good explanation about how to mock DOM in this &lt;a href=&quot;http://www.asbjornenge.com/wwc/testing_react_components.html&quot;&gt;blog post&lt;/a&gt;.
To follow this example we need to install &lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;jsdom&lt;/a&gt; and &lt;a href=&quot;https://github.com/rstacruz/mocha-jsdom&quot;&gt;mocha-jsdom&lt;/a&gt;. 
I’ve created &lt;em&gt;dom-mock.js&lt;/em&gt; file.
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/fab84f93dae04ca4123a.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt; - create a file named mocha.opts in test directroy, add this line to it: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--compilers js:babel/register --recursive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I found this reading this &lt;a href=&quot;https://github.com/jesstelford/react-testing-mocha-jsdom&quot;&gt;post&lt;/a&gt; and install &lt;a href=&quot;https://babeljs.io/&quot;&gt;babel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And finally - the test! I’ve created &lt;em&gt;component-test.js&lt;/em&gt; file in test directory:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/c4fd4c4cdad19b28fe0f.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Run build. Hurray! The test is passing:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/post_img/vfd-4.png&quot; alt=&quot;Fourth step result&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also configure test running in your &lt;em&gt;package.json&lt;/em&gt; - to run tests from command line using: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$npm test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this addition our &lt;em&gt;package.json&lt;/em&gt; looks like this:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/085b9e9c727f166df806.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;ecmascript-2015&quot;&gt;ECMAScript 2015&lt;/h2&gt;
&lt;p&gt;If you are plannig to use ECMAScript 2015, you might want to consider installing gulp-babel to tranform your ECMAScript 2015 code to ECMAScript 5 for your browser to understand it. Just add ‘es2015’ task in &lt;em&gt;gulpfile.js&lt;/em&gt;:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/8fd92aee1786dc774a9d.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jul 2015 00:00:00 -0700</pubDate>
        <link>http://www.bebetterdeveloper.com/coding/getting-started-react-mocha.html</link>
        <guid isPermaLink="true">http://www.bebetterdeveloper.com/coding/getting-started-react-mocha.html</guid>
        
        <category>JavaScript</category>
        
        <category>Mocha</category>
        
        <category>Gulp</category>
        
        <category>ES2015</category>
        
        <category>React</category>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>ES2015 + React using Gulp</title>
        <description>&lt;p&gt;Recently I started exploring new features of ECMAScript 2015 while using React. So here is how I set-up my dev environment with &lt;a href=&quot;http://gulpjs.com/&quot;&gt;gulp&lt;/a&gt;.
I have 2 simple steps  (running one after other in this sequence):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Transform XLS files: I precompile React JSX template files into plain JavaScript using gulp-react: 
  &lt;script src=&quot;https://gist.github.com/JelenaBarinova/b7b58c270e3e560056b3.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Transform ES2015 files: I take JavaScript files, produced after first transformation and turn them into ES5 files using gulp-babel: 
  &lt;script src=&quot;https://gist.github.com/JelenaBarinova/7245b2c53e06eb8772ab.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here it all gathered and chained together:
&lt;script src=&quot;https://gist.github.com/JelenaBarinova/95b2d933b6f75d6cc495.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;In addition to two transformation tasks I like to open output in browser, for this I use gulp-open.&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; as my IDE, so I have set this gulp task named “build” as a build task in VS Code settings.&lt;br /&gt;
&lt;img src=&quot;/img/post_img/vs-code-settings.png&quot; alt=&quot;Blog infrastructure&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now once I change code and want to check it - I just press ⇧⌘B (on Mac) and the result is in front of me.&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jul 2015 00:00:00 -0700</pubDate>
        <link>http://www.bebetterdeveloper.com/coding/es6-react-babel.html</link>
        <guid isPermaLink="true">http://www.bebetterdeveloper.com/coding/es6-react-babel.html</guid>
        
        <category>JavaScript</category>
        
        <category>Gulp</category>
        
        <category>ES2015</category>
        
        <category>React</category>
        
        <category>dev environment</category>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Sorting: Heap Sort</title>
        <description>&lt;p&gt;I have already &lt;a href=&quot;http://www.bebetterdeveloper.com/data-structure-max-priority-queue/&quot;&gt;demonstrated&lt;/a&gt; one of the binary heap usage scenarios – priority queue. Today I want to show another binary heap usage example – heap sort. The algorithm consist of two steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;on the given set of numbers ensure max-heap invariant (&lt;em&gt;the value of each node is not bigger than value of its parent with biggest element at the root&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;while heap is not empty remove first (max) item from the max-heap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first part is almost identical to the way we &lt;a href=&quot;https://github.com/sergejusb/algorithms/blob/master/data-structures/binaryHeap.js#L20&quot;&gt;ensured&lt;/a&gt; binary heap invariant during delete operation. In order to make second step space efficient, we need do following things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;swap first (max) item with the last one in the max-heap&lt;/li&gt;
  &lt;li&gt;decrease size of the max-heap by 1&lt;/li&gt;
  &lt;li&gt;ensure max-heap invariant starting from the first item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s sort items [3 4 1 3 5 1 2]. As always I’ll use collors to specify &lt;span style=&quot;color: #99cc00;&quot;&gt;parent&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;child&lt;/span&gt; or items to be &lt;span style=&quot;color: #ff0000;&quot;&gt;swapped&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;Step #1&lt;/p&gt;

&lt;p&gt;The binary tree constructed from the given items does not conform max-heap invariant:&lt;/p&gt;

&lt;pre&gt;     3
   4   1
  3 5 1 2&lt;/pre&gt;

&lt;p&gt;To ensure max-heap invariant for the given set we need to take each node in the tree (except leafs) and recursively ensure it is bigger than any of the child nodes. As a reminder, our binary heap stores items starting from index 1, so we need to temporarily add null item at the begining: [null 3 4 1 3 5 1 2]&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 4 &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;/td&gt;
      &lt;td&gt;3 5 &lt;span style=&quot;color: #0000ff;&quot;&gt;1 2&lt;/span&gt;]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 4 &lt;span style=&quot;color: #99cc00;&quot;&gt;2&lt;/span&gt; &lt;/td&gt;
      &lt;td&gt;3 5 &lt;span style=&quot;color: #0000ff;&quot;&gt;1 1&lt;/span&gt;]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt; 2&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;3 5&lt;/span&gt; 1 1]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 &lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt; 2&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;3 4&lt;/span&gt; 1 1]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;5 2&lt;/span&gt; &lt;/td&gt;
      &lt;td&gt;3 4 1 1]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;3 2&lt;/span&gt; &lt;/td&gt;
      &lt;td&gt;3 4 1 1]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 5 &lt;span style=&quot;color: #99cc00;&quot;&gt;3&lt;/span&gt; 2&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;3 4&lt;/span&gt; 1 1]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 5 &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt; 2&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;3 3&lt;/span&gt; 1 1]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;At this point we have binary max-heap:&lt;/p&gt;

&lt;pre&gt;     5
   4   2
  3 3 1 1&lt;/pre&gt;
&lt;p&gt;Step #2&lt;/p&gt;

&lt;p&gt;Swap first (max) item with the last one and ensure max-heap invariant:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt; 4 2 3 3 1 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 4 2 3 3 1&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt;]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;4 2&lt;/span&gt; 3 3 1&lt;/td&gt;
      &lt;td&gt;5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;1 2&lt;/span&gt; 3 3 1&lt;/td&gt;
      &lt;td&gt;5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 4 &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; 2 &lt;span style=&quot;color: #0000ff;&quot;&gt;3 3&lt;/span&gt; 1&lt;/td&gt;
      &lt;td&gt;5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 4 &lt;span style=&quot;color: #99cc00;&quot;&gt;3&lt;/span&gt; 2 &lt;span style=&quot;color: #0000ff;&quot;&gt;3 1&lt;/span&gt; 1&lt;/td&gt;
      &lt;td&gt;5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; 3 2 3 1 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 3 2 3 1&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;3 2&lt;/span&gt; 3 1&lt;/td&gt;
      &lt;td&gt;4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;1 2&lt;/span&gt; 3 1&lt;/td&gt;
      &lt;td&gt;4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; 2 &lt;span style=&quot;color: #0000ff;&quot;&gt;3 1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 &lt;span style=&quot;color: #99cc00;&quot;&gt;3&lt;/span&gt; 2 &lt;span style=&quot;color: #0000ff;&quot;&gt;1 1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;4 5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; 3 2 1 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 3 2 1&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;3 2&lt;/span&gt; 1&lt;/td&gt;
      &lt;td&gt;3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;1 2&lt;/span&gt; 1&lt;/td&gt;
      &lt;td&gt;3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; 2 &lt;span style=&quot;color: #0000ff;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; 1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 1 2&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;1 2&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;1 1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; 1 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 1&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; 3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;2 3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;2 3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 2 3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;1 2 3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 1 2 3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Finally we remove leading null item and we have sorted items! Implementation (&lt;a href=&quot;https://github.com/sergejusb/algorithms/blob/master/sorting/sort_tests.js&quot;&gt;tests&lt;/a&gt;) of the heap sort is heavily based on the binary heap implementation:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://gist-it.appspot.com/https://github.com/sergejusb/algorithms/blob/master/sorting/heapSort.js?
footer=minimal&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Complexity&lt;/strong&gt;: O(n·logn)&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Feb 2014 00:00:26 -0800</pubDate>
        <link>http://www.bebetterdeveloper.com/algorithms/sorting/sorting-heap-sort.html</link>
        <guid isPermaLink="true">http://www.bebetterdeveloper.com/algorithms/sorting/sorting-heap-sort.html</guid>
        
        <category>Binary Heap</category>
        
        <category>Heap Sort</category>
        
        
        <category>algorithms</category>
        
        <category>sorting</category>
        
      </item>
    
      <item>
        <title>Data Structure: Max Priority Queue</title>
        <description>&lt;p&gt;Today I will implement another important abstract data type – &lt;a href=&quot;http://en.wikipedia.org/wiki/Priority_queue&quot;&gt;priority queue&lt;/a&gt;. Priority queues are used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in heap sort&lt;/li&gt;
  &lt;li&gt;to track top N elements in a very long sequence&lt;/li&gt;
  &lt;li&gt;to merge K ordered sequences and produce single ordered sequence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually priority queues have following functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;insert() – to add new item with a priority&lt;/li&gt;
  &lt;li&gt;deleteMin() or deleteMax() – to remove an item with min/max priority&lt;/li&gt;
  &lt;li&gt;findMin() or findMax() – to get an item with min/max priority&lt;/li&gt;
  &lt;li&gt;length() – to get the number of items in the priority queue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a foundation I’ll use in the &lt;a href=&quot;http://www.bebetterdeveloper.com/data-structure-binary-heap/&quot;&gt;last post&lt;/a&gt; described efficient data structure – binary heap (in fact, max-heap). Overall, priority queue can be seen as a generalization of &lt;a href=&quot;http://www.bebetterdeveloper.com/data-structure-stack-array/&quot;&gt;stack&lt;/a&gt; and &lt;a href=&quot;http://www.bebetterdeveloper.com/data-structure-queue/&quot;&gt;queue&lt;/a&gt; data structures. Stack can be implemented as a max priority queue where priority of each inserted element is monotonically increasing and queue – where priority of each inserted element is monotonically decreasing. &lt;/p&gt;

&lt;p&gt;The implementation of max priority queue (&lt;a href=&quot;https://github.com/sergejusb/algorithms/blob/master/data-structures/maxPriorityQueue_tests.js&quot;&gt;tests&lt;/a&gt;) is almost identical to the max-heap implementation:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://gist-it.appspot.com/https://github.com/sergejusb/algorithms/blob/master/data-structures/maxPriorityQueue.js?
footer=minimal&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Complexity&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;insert - O(logn)&lt;/li&gt;
  &lt;li&gt;deleteMin/deleteMax - O(logn)&lt;/li&gt;
  &lt;li&gt;findMin/findMax - O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 15 Feb 2014 00:00:00 -0800</pubDate>
        <link>http://www.bebetterdeveloper.com/data%20structure/data-structure-max-priority-queue.html</link>
        <guid isPermaLink="true">http://www.bebetterdeveloper.com/data%20structure/data-structure-max-priority-queue.html</guid>
        
        <category>Binary Heap</category>
        
        <category>Priority Queue</category>
        
        
        <category>data structure</category>
        
      </item>
    
      <item>
        <title>Data Structure: Binary Heap</title>
        <description>&lt;p&gt;Today I will implement very efficient data structure – &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_heap&quot;&gt;binary heap&lt;/a&gt;. Binary heap – is an array-based &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees&quot;&gt;complete binary tree&lt;/a&gt; (&lt;em&gt;binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible&lt;/em&gt;) which satisfies one of the following ordering properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;min-heap – the value of each node is not smaller than value of its parent with smallest element at the root;&lt;/li&gt;
  &lt;li&gt;max-heap – the value of each node is not bigger than value of its parent with biggest element at the root
Binary heap is a foundation for an abstract data type - &lt;a href=&quot;http://en.wikipedia.org/wiki/Priority_queue&quot;&gt;priority queue&lt;/a&gt;, wich I will cover in next post.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Due to the nature of binary heap (complete binary tree) it can be very efficiently implemented using &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_array&quot;&gt;dynamic array&lt;/a&gt;. Items in the array are usually stored starting from index 1, thus allowing very easy navigation through binary heap:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for the item with index k its parent index is &lt;strong&gt;k &amp;gt;&amp;gt; 1&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;for the item with index k children indexes are &lt;strong&gt;k &amp;lt;&amp;lt; 1&lt;/strong&gt; and &lt;strong&gt;k &amp;lt;&amp;lt; 1 + 1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually binary heaps have following functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;insert() – to add new item&lt;/li&gt;
  &lt;li&gt;delete() – to remove min or max item (depending on the ordering)&lt;/li&gt;
  &lt;li&gt;length() – to get the number of items in binary heap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To add new item:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add the item to the bottom level of the binary heap (as the last possible item)&lt;/li&gt;
  &lt;li&gt;compare added item with its parent&lt;/li&gt;
  &lt;li&gt;if they are in correct order – break&lt;/li&gt;
  &lt;li&gt;else – exchange items and repeat with the parent
&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Heap_add_step1.svg/300px-Heap_add_step1.svg.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/1/16/Heap_add_step2.svg/300px-Heap_add_step2.svg.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/5/51/Heap_add_step3.svg/300px-Heap_add_step3.svg.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To delete maximum item (for max-heap) or minimum item (for min-heap):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;replace the root of the binary heap with the last item on the bottom level&lt;/li&gt;
  &lt;li&gt;compare new root with the biggest (for max-heap) or  smallest (for min-heap) of children&lt;/li&gt;
  &lt;li&gt;if they are in correct order – break&lt;/li&gt;
  &lt;li&gt;else – exchange items and repeat with the selected child
&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Heap_delete_step0.svg/300px-Heap_delete_step0.svg.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Heap_remove_step1.svg/300px-Heap_remove_step1.svg.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/2/22/Heap_remove_step2.svg/300px-Heap_remove_step2.svg.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bellow you can find possible implementation of the binary heap (&lt;a href=&quot;https://github.com/sergejusb/algorithms/blob/master/data-structures/binaryHeap_tests.js&quot;&gt;tests&lt;/a&gt;):&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://gist-it.appspot.com/https://github.com/sergejusb/algorithms/blob/master/data-structures/binaryHeap.js?
footer=minimal&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Complexity&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;insert - O(logn)&lt;/li&gt;
  &lt;li&gt;delete - O(logn)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 06 Jan 2014 00:00:00 -0800</pubDate>
        <link>http://www.bebetterdeveloper.com/data%20structure/data-structure-binary-heap.html</link>
        <guid isPermaLink="true">http://www.bebetterdeveloper.com/data%20structure/data-structure-binary-heap.html</guid>
        
        <category>Binary Heap</category>
        
        <category>Dynamic Array</category>
        
        
        <category>data structure</category>
        
      </item>
    
      <item>
        <title>Presentation: Continuous Happiness by Continuous Delivery</title>
        <description>&lt;p&gt;Recently at &lt;a href=&quot;http://buildstuff.lt/&quot;&gt;Build Stuff&lt;/a&gt; conference I gave a practical talk on Continuous Delivery. Enjoy and tell what you think!&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;c5ba45908bd90130e24f22000a8c4314&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Wed, 11 Dec 2013 13:58:42 -0800</pubDate>
        <link>http://www.bebetterdeveloper.com/presentation/presentation-continuous-delivery.html</link>
        <guid isPermaLink="true">http://www.bebetterdeveloper.com/presentation/presentation-continuous-delivery.html</guid>
        
        <category>Continuous Delivery</category>
        
        <category>DevOps</category>
        
        
        <category>presentation</category>
        
      </item>
    
      <item>
        <title>Sorting: Quick Sort</title>
        <description>&lt;p&gt;In this, &lt;a href=&quot;http://www.bebetterdeveloper.com/category/algorithms/sorting/&quot;&gt;last&lt;/a&gt; in the series, post I will implement probably on of the best known sorting algorithm - &lt;a href=&quot;http://en.wikipedia.org/wiki/Quicksort&quot;&gt;Quick Sort&lt;/a&gt;. The idea of the in-place algorithm is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;randomize initial list&lt;/li&gt;
  &lt;li&gt;select first element as partition value&lt;/li&gt;
  &lt;li&gt;scan i from left to right so long as current element is less than partition value&lt;/li&gt;
  &lt;li&gt;scan j from right to left so long as current element is more than partition value&lt;/li&gt;
  &lt;li&gt;exchange i-indexed element with j-indexed element&lt;/li&gt;
  &lt;li&gt;repeat until i and j cross&lt;/li&gt;
  &lt;li&gt;exchange first element with j-indexed element&lt;/li&gt;
  &lt;li&gt;split list into two sub-lists bounded by j-indexed partition&lt;/li&gt;
  &lt;li&gt;recursively repeat until list contains one or zero elements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After each iteration when first element is exchanged with j-indexed element following invariant should be valid: elements to left are smaller or equal than partition value and elements to the right are bigger or equal. We can visualize quick sort algorithm by sorting following list [3 5 4 7 2 1]. I’ll use colors to specify &lt;span style=&quot;color: #0000ff;&quot;&gt;partition value&lt;/span&gt;, &lt;span style=&quot;color: #99cc00;&quot;&gt;current i-indexed element&lt;/span&gt; and &lt;span style=&quot;color: #ff0000;&quot;&gt;current j-indexed element&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Iteration #1
[&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt; 5 4 7 2 1] → [&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt; 4 7 2 1] → [&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt; 4 7 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;] → [&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/span&gt; 4 7 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/span&gt;]
[&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt; 1 &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt; 7 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt;] → [&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt; 1 &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt; 7 &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; 5] → [&lt;span style=&quot;color: #3366ff;&quot;&gt;3&lt;/span&gt; 1 &lt;strong&gt;&lt;span style=&quot;color: #99cc00;&quot;&gt;2&lt;/span&gt;&lt;/strong&gt; 7 &lt;span style=&quot;color: #ff0000;&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/span&gt; 5]
[&lt;span style=&quot;color: #3366ff;&quot;&gt;3&lt;/span&gt; 1 2 &lt;span style=&quot;color: #99cc00;&quot;&gt;7&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; 5] → [&lt;span style=&quot;color: #3366ff;&quot;&gt;3&lt;/span&gt; 1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;7 &lt;/span&gt;4 5] → [&lt;span style=&quot;color: #3366ff;&quot;&gt;3&lt;/span&gt; 1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;7&lt;/span&gt; 4 5] → [&lt;strong&gt;2&lt;/strong&gt; 1 &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt;&lt;/strong&gt; 7 4 5]&lt;/p&gt;

&lt;p&gt;Iteration #2
[ [&lt;span style=&quot;color: #0000ff;&quot;&gt;2&lt;/span&gt; 1] 3 [7 4 5] ] → [ [&lt;span style=&quot;color: #0000ff;&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt;] 3 [7 4 5] ] → [ [&lt;span style=&quot;color: #0000ff;&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;] 3 [7 4 5] ] → [ [&lt;strong&gt;1&lt;/strong&gt; &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;2&lt;/span&gt;&lt;/strong&gt;] 3 [7 4 5] ]&lt;/p&gt;

&lt;p&gt;Iteration #3
[ [&lt;span style=&quot;color: #0000ff;&quot;&gt;1&lt;/span&gt;] [2] 3 [7 4 5] ] → [&lt;span style=&quot;color: #0000ff;&quot;&gt;1&lt;/span&gt; [2] 3 [4 7 5] ]&lt;/p&gt;

&lt;p&gt;Iteration #4
[1 [&lt;span style=&quot;color: #0000ff;&quot;&gt;2&lt;/span&gt;] 3 [7 4 5] ] → [1 &lt;span style=&quot;color: #0000ff;&quot;&gt;2&lt;/span&gt; 3 [7 4 5] ]&lt;/p&gt;

&lt;p&gt;Iteration #5
[1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;7&lt;/span&gt; 4 5] ] → [1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;7&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt; 5] ] → [1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;7&lt;/span&gt; 4 &lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt;] ] → [ 1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;7&lt;/span&gt; 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt;] ] → [1 2 3 [&lt;strong&gt;5&lt;/strong&gt; 4 &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;7&lt;/span&gt;&lt;/strong&gt;] ]&lt;/p&gt;

&lt;p&gt;Iteration #6
[1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;5&lt;/span&gt; 4] 7] → [1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;5&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt;] 7] → [1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;5&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt;] 7]  → [1 2 3 [&lt;strong&gt;4&lt;/strong&gt; &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;5&lt;/span&gt;&lt;/strong&gt;] 7]&lt;/p&gt;

&lt;p&gt;Iteration #7
[1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;4&lt;/span&gt;] [5] 7] → [1 2 3 &lt;span style=&quot;color: #0000ff;&quot;&gt;4&lt;/span&gt; [5] 7]&lt;/p&gt;

&lt;p&gt;Iteration #8
[1 2 3 4 [&lt;span style=&quot;color: #0000ff;&quot;&gt;5&lt;/span&gt;] 7] → [1 2 3 4 &lt;span style=&quot;color: #0000ff;&quot;&gt;5&lt;/span&gt; 7]&lt;/p&gt;

&lt;p&gt;For the sake of easiness I’ll skip list randomization step. Implementation of the quick sort heavily rely on sort and partition functions:&lt;/p&gt;

&lt;script src=&quot;http://gist-it.appspot.com/https://github.com/sergejusb/algorithms/blob/master/sorting/quickSort.js?footer=minimal&quot;&gt;
&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt; O(n·logn).&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Oct 2013 13:16:55 -0700</pubDate>
        <link>http://www.bebetterdeveloper.com/algorithms/sorting/sorting-quick-sort.html</link>
        <guid isPermaLink="true">http://www.bebetterdeveloper.com/algorithms/sorting/sorting-quick-sort.html</guid>
        
        <category>Quick Sort</category>
        
        
        <category>algorithms</category>
        
        <category>sorting</category>
        
      </item>
    
  </channel>
</rss>
