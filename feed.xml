<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Be a Better Developer</title>
    <description>Practical notes on development by Sergey Barinov</description>
    <link>http://bebetterdeveloper/</link>
    <atom:link href="http://bebetterdeveloper/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 16 Jul 2015 19:57:55 -0700</pubDate>
    <lastBuildDate>Thu, 16 Jul 2015 19:57:55 -0700</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Sorting: Heap Sort</title>
        <description>&lt;p&gt;I have already &lt;a href=&quot;http://www.bebetterdeveloper.com/data-structure-max-priority-queue/&quot;&gt;demonstrated&lt;/a&gt; one of the binary heap usage scenarios – priority queue. Today I want to show another binary heap usage example – heap sort. The algorithm consist of two steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;on the given set of numbers ensure max-heap invariant (&lt;em&gt;the value of each node is not bigger than value of its parent with biggest element at the root&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;while heap is not empty remove first (max) item from the max-heap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first part is almost identical to the way we &lt;a href=&quot;https://github.com/sergejusb/algorithms/blob/master/data-structures/binaryHeap.js#L20&quot;&gt;ensured&lt;/a&gt; binary heap invariant during delete operation. In order to make second step space efficient, we need do following things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;swap first (max) item with the last one in the max-heap&lt;/li&gt;
  &lt;li&gt;decrease size of the max-heap by 1&lt;/li&gt;
  &lt;li&gt;ensure max-heap invariant starting from the first item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s sort items [3 4 1 3 5 1 2]. As always I’ll use collors to specify &lt;span style=&quot;color: #99cc00;&quot;&gt;parent&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;child&lt;/span&gt; or items to be &lt;span style=&quot;color: #ff0000;&quot;&gt;swapped&lt;/span&gt;:&lt;/p&gt;

&lt;p&gt;Step #1&lt;/p&gt;

&lt;p&gt;The binary tree constructed from the given items does not conform max-heap invariant:&lt;/p&gt;

&lt;pre&gt;     3
   4   1
  3 5 1 2&lt;/pre&gt;

&lt;p&gt;To ensure max-heap invariant for the given set we need to take each node in the tree (except leafs) and recursively ensure it is bigger than any of the child nodes. As a reminder, our binary heap stores items starting from index 1, so we need to temporarily add null item at the begining: [null 3 4 1 3 5 1 2]&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 4 &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;/td&gt;
      &lt;td&gt;3 5 &lt;span style=&quot;color: #0000ff;&quot;&gt;1 2&lt;/span&gt;]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 4 &lt;span style=&quot;color: #99cc00;&quot;&gt;2&lt;/span&gt; &lt;/td&gt;
      &lt;td&gt;3 5 &lt;span style=&quot;color: #0000ff;&quot;&gt;1 1&lt;/span&gt;]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt; 2&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;3 5&lt;/span&gt; 1 1]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 &lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt; 2&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;3 4&lt;/span&gt; 1 1]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;5 2&lt;/span&gt; &lt;/td&gt;
      &lt;td&gt;3 4 1 1]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;3 2&lt;/span&gt; &lt;/td&gt;
      &lt;td&gt;3 4 1 1]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 5 &lt;span style=&quot;color: #99cc00;&quot;&gt;3&lt;/span&gt; 2&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;3 4&lt;/span&gt; 1 1]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 5 &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt; 2&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;3 3&lt;/span&gt; 1 1]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;At this point we have binary max-heap:&lt;/p&gt;

&lt;pre&gt;     5
   4   2
  3 3 1 1&lt;/pre&gt;
&lt;p&gt;Step #2&lt;/p&gt;

&lt;p&gt;Swap first (max) item with the last one and ensure max-heap invariant:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt; 4 2 3 3 1 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 4 2 3 3 1&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt;]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;4 2&lt;/span&gt; 3 3 1&lt;/td&gt;
      &lt;td&gt;5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;1 2&lt;/span&gt; 3 3 1&lt;/td&gt;
      &lt;td&gt;5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 4 &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; 2 &lt;span style=&quot;color: #0000ff;&quot;&gt;3 3&lt;/span&gt; 1&lt;/td&gt;
      &lt;td&gt;5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 4 &lt;span style=&quot;color: #99cc00;&quot;&gt;3&lt;/span&gt; 2 &lt;span style=&quot;color: #0000ff;&quot;&gt;3 1&lt;/span&gt; 1&lt;/td&gt;
      &lt;td&gt;5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; 3 2 3 1 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 3 2 3 1&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;3 2&lt;/span&gt; 3 1&lt;/td&gt;
      &lt;td&gt;4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;1 2&lt;/span&gt; 3 1&lt;/td&gt;
      &lt;td&gt;4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; 2 &lt;span style=&quot;color: #0000ff;&quot;&gt;3 1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 &lt;span style=&quot;color: #99cc00;&quot;&gt;3&lt;/span&gt; 2 &lt;span style=&quot;color: #0000ff;&quot;&gt;1 1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;4 5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; 3 2 1 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 3 2 1&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;3 2&lt;/span&gt; 1&lt;/td&gt;
      &lt;td&gt;3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;1 2&lt;/span&gt; 1&lt;/td&gt;
      &lt;td&gt;3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null 3 &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; 2 &lt;span style=&quot;color: #0000ff;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; 1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 1 2&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;1 2&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;1 1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; 1 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 1&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; 3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;2 3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;2 3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 2 3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[null &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;1 2 3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;[null&lt;/td&gt;
      &lt;td&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 1 2 3 3 4 5]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Finally we remove leading null item and we have sorted items! Implementation (&lt;a href=&quot;https://github.com/sergejusb/algorithms/blob/master/sorting/sort_tests.js&quot;&gt;tests&lt;/a&gt;) of the heap sort is heavily based on the binary heap implementation:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://gist-it.appspot.com/https://github.com/sergejusb/algorithms/blob/master/sorting/heapSort.js?
footer=minimal&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Complexity&lt;/strong&gt;: O(n·logn)&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Feb 2014 00:00:26 -0800</pubDate>
        <link>http://bebetterdeveloper/algorithms/sorting/sorting-heap-sort.html</link>
        <guid isPermaLink="true">http://bebetterdeveloper/algorithms/sorting/sorting-heap-sort.html</guid>
        
        <category>Binary Heap</category>
        
        <category>Heap Sort</category>
        
        
        <category>algorithms</category>
        
        <category>sorting</category>
        
      </item>
    
      <item>
        <title>Data Structure: Max Priority Queue</title>
        <description>&lt;p&gt;Today I will implement another important abstract data type – &lt;a href=&quot;http://en.wikipedia.org/wiki/Priority_queue&quot;&gt;priority queue&lt;/a&gt;. Priority queues are used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in heap sort&lt;/li&gt;
  &lt;li&gt;to track top N elements in a very long sequence&lt;/li&gt;
  &lt;li&gt;to merge K ordered sequences and produce single ordered sequence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually priority queues have following functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;insert() – to add new item with a priority&lt;/li&gt;
  &lt;li&gt;deleteMin() or deleteMax() – to remove an item with min/max priority&lt;/li&gt;
  &lt;li&gt;findMin() or findMax() – to get an item with min/max priority&lt;/li&gt;
  &lt;li&gt;length() – to get the number of items in the priority queue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a foundation I’ll use in the &lt;a href=&quot;http://www.bebetterdeveloper.com/data-structure-binary-heap/&quot;&gt;last post&lt;/a&gt; described efficient data structure – binary heap (in fact, max-heap). Overall, priority queue can be seen as a generalization of &lt;a href=&quot;http://www.bebetterdeveloper.com/data-structure-stack-array/&quot;&gt;stack&lt;/a&gt; and &lt;a href=&quot;http://www.bebetterdeveloper.com/data-structure-queue/&quot;&gt;queue&lt;/a&gt; data structures. Stack can be implemented as a max priority queue where priority of each inserted element is monotonically increasing and queue – where priority of each inserted element is monotonically decreasing. &lt;/p&gt;

&lt;p&gt;The implementation of max priority queue (&lt;a href=&quot;https://github.com/sergejusb/algorithms/blob/master/data-structures/maxPriorityQueue_tests.js&quot;&gt;tests&lt;/a&gt;) is almost identical to the max-heap implementation:&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://gist-it.appspot.com/https://github.com/sergejusb/algorithms/blob/master/data-structures/maxPriorityQueue.js?
footer=minimal&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Complexity&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;insert - O(logn)&lt;/li&gt;
  &lt;li&gt;deleteMin/deleteMax - O(logn)&lt;/li&gt;
  &lt;li&gt;findMin/findMax - O(1)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 15 Feb 2014 00:00:00 -0800</pubDate>
        <link>http://bebetterdeveloper/data%20structure/data-structure-max-priority-queue.html</link>
        <guid isPermaLink="true">http://bebetterdeveloper/data%20structure/data-structure-max-priority-queue.html</guid>
        
        <category>Binary Heap</category>
        
        <category>Priority Queue</category>
        
        
        <category>data structure</category>
        
      </item>
    
      <item>
        <title>Data Structure: Binary Heap</title>
        <description>&lt;p&gt;Today I will implement very efficient data structure – &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_heap&quot;&gt;binary heap&lt;/a&gt;. Binary heap – is an array-based &lt;a href=&quot;http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees&quot;&gt;complete binary tree&lt;/a&gt; (&lt;em&gt;binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible&lt;/em&gt;) which satisfies one of the following ordering properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;min-heap – the value of each node is not smaller than value of its parent with smallest element at the root;&lt;/li&gt;
  &lt;li&gt;max-heap – the value of each node is not bigger than value of its parent with biggest element at the root
Binary heap is a foundation for an abstract data type - &lt;a href=&quot;http://en.wikipedia.org/wiki/Priority_queue&quot;&gt;priority queue&lt;/a&gt;, wich I will cover in next post.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Due to the nature of binary heap (complete binary tree) it can be very efficiently implemented using &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_array&quot;&gt;dynamic array&lt;/a&gt;. Items in the array are usually stored starting from index 1, thus allowing very easy navigation through binary heap:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for the item with index k its parent index is &lt;strong&gt;k &amp;gt;&amp;gt; 1&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;for the item with index k children indexes are &lt;strong&gt;k &amp;lt;&amp;lt; 1&lt;/strong&gt; and &lt;strong&gt;k &amp;lt;&amp;lt; 1 + 1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually binary heaps have following functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;insert() – to add new item&lt;/li&gt;
  &lt;li&gt;delete() – to remove min or max item (depending on the ordering)&lt;/li&gt;
  &lt;li&gt;length() – to get the number of items in binary heap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To add new item:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;add the item to the bottom level of the binary heap (as the last possible item)&lt;/li&gt;
  &lt;li&gt;compare added item with its parent&lt;/li&gt;
  &lt;li&gt;if they are in correct order – break&lt;/li&gt;
  &lt;li&gt;else – exchange items and repeat with the parent
&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Heap_add_step1.svg/300px-Heap_add_step1.svg.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/1/16/Heap_add_step2.svg/300px-Heap_add_step2.svg.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/5/51/Heap_add_step3.svg/300px-Heap_add_step3.svg.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To delete maximum item (for max-heap) or minimum item (for min-heap):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;replace the root of the binary heap with the last item on the bottom level&lt;/li&gt;
  &lt;li&gt;compare new root with the biggest (for max-heap) or  smallest (for min-heap) of children&lt;/li&gt;
  &lt;li&gt;if they are in correct order – break&lt;/li&gt;
  &lt;li&gt;else – exchange items and repeat with the selected child
&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Heap_delete_step0.svg/300px-Heap_delete_step0.svg.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Heap_remove_step1.svg/300px-Heap_remove_step1.svg.png&quot; alt=&quot;&quot; /&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/2/22/Heap_remove_step2.svg/300px-Heap_remove_step2.svg.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bellow you can find possible implementation of the binary heap (&lt;a href=&quot;https://github.com/sergejusb/algorithms/blob/master/data-structures/binaryHeap_tests.js&quot;&gt;tests&lt;/a&gt;):&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;http://gist-it.appspot.com/https://github.com/sergejusb/algorithms/blob/master/data-structures/binaryHeap.js?
footer=minimal&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Complexity&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;insert - O(logn)&lt;/li&gt;
  &lt;li&gt;delete - O(logn)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 06 Jan 2014 00:00:00 -0800</pubDate>
        <link>http://bebetterdeveloper/data%20structure/data-structure-binary-heap.html</link>
        <guid isPermaLink="true">http://bebetterdeveloper/data%20structure/data-structure-binary-heap.html</guid>
        
        <category>Binary Heap</category>
        
        <category>Dynamic Array</category>
        
        
        <category>data structure</category>
        
      </item>
    
      <item>
        <title>Presentation: Continuous Happiness by Continuous Delivery</title>
        <description>&lt;p&gt;Recently at &lt;a href=&quot;http://buildstuff.lt/&quot;&gt;Build Stuff&lt;/a&gt; conference I gave a practical talk on Continuous Delivery. Enjoy and tell what you think!&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;c5ba45908bd90130e24f22000a8c4314&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Wed, 11 Dec 2013 13:58:42 -0800</pubDate>
        <link>http://bebetterdeveloper/presentation/presentation-continuous-delivery.html</link>
        <guid isPermaLink="true">http://bebetterdeveloper/presentation/presentation-continuous-delivery.html</guid>
        
        <category>Continuous Delivery</category>
        
        <category>DevOps</category>
        
        
        <category>presentation</category>
        
      </item>
    
      <item>
        <title>Sorting: Quick Sort</title>
        <description>&lt;p&gt;In this, &lt;a href=&quot;http://www.bebetterdeveloper.com/category/algorithms/sorting/&quot;&gt;last&lt;/a&gt; in the series, post I will implement probably on of the best known sorting algorithm - &lt;a href=&quot;http://en.wikipedia.org/wiki/Quicksort&quot;&gt;Quick Sort&lt;/a&gt;. The idea of the in-place algorithm is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;randomize initial list&lt;/li&gt;
  &lt;li&gt;select first element as partition value&lt;/li&gt;
  &lt;li&gt;scan i from left to right so long as current element is less than partition value&lt;/li&gt;
  &lt;li&gt;scan j from right to left so long as current element is more than partition value&lt;/li&gt;
  &lt;li&gt;exchange i-indexed element with j-indexed element&lt;/li&gt;
  &lt;li&gt;repeat until i and j cross&lt;/li&gt;
  &lt;li&gt;exchange first element with j-indexed element&lt;/li&gt;
  &lt;li&gt;split list into two sub-lists bounded by j-indexed partition&lt;/li&gt;
  &lt;li&gt;recursively repeat until list contains one or zero elements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After each iteration when first element is exchanged with j-indexed element following invariant should be valid: elements to left are smaller or equal than partition value and elements to the right are bigger or equal. We can visualize quick sort algorithm by sorting following list [3 5 4 7 2 1]. I’ll use colors to specify &lt;span style=&quot;color: #0000ff;&quot;&gt;partition value&lt;/span&gt;, &lt;span style=&quot;color: #99cc00;&quot;&gt;current i-indexed element&lt;/span&gt; and &lt;span style=&quot;color: #ff0000;&quot;&gt;current j-indexed element&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Iteration #1
[&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt; 5 4 7 2 1] → [&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt; 4 7 2 1] → [&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt; 4 7 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;] → [&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/span&gt; 4 7 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/span&gt;]
[&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt; 1 &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt; 7 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt;] → [&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt; 1 &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt; 7 &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; 5] → [&lt;span style=&quot;color: #3366ff;&quot;&gt;3&lt;/span&gt; 1 &lt;strong&gt;&lt;span style=&quot;color: #99cc00;&quot;&gt;2&lt;/span&gt;&lt;/strong&gt; 7 &lt;span style=&quot;color: #ff0000;&quot;&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/span&gt; 5]
[&lt;span style=&quot;color: #3366ff;&quot;&gt;3&lt;/span&gt; 1 2 &lt;span style=&quot;color: #99cc00;&quot;&gt;7&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; 5] → [&lt;span style=&quot;color: #3366ff;&quot;&gt;3&lt;/span&gt; 1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;7 &lt;/span&gt;4 5] → [&lt;span style=&quot;color: #3366ff;&quot;&gt;3&lt;/span&gt; 1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;7&lt;/span&gt; 4 5] → [&lt;strong&gt;2&lt;/strong&gt; 1 &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;3&lt;/span&gt;&lt;/strong&gt; 7 4 5]&lt;/p&gt;

&lt;p&gt;Iteration #2
[ [&lt;span style=&quot;color: #0000ff;&quot;&gt;2&lt;/span&gt; 1] 3 [7 4 5] ] → [ [&lt;span style=&quot;color: #0000ff;&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt;] 3 [7 4 5] ] → [ [&lt;span style=&quot;color: #0000ff;&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;] 3 [7 4 5] ] → [ [&lt;strong&gt;1&lt;/strong&gt; &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;2&lt;/span&gt;&lt;/strong&gt;] 3 [7 4 5] ]&lt;/p&gt;

&lt;p&gt;Iteration #3
[ [&lt;span style=&quot;color: #0000ff;&quot;&gt;1&lt;/span&gt;] [2] 3 [7 4 5] ] → [&lt;span style=&quot;color: #0000ff;&quot;&gt;1&lt;/span&gt; [2] 3 [4 7 5] ]&lt;/p&gt;

&lt;p&gt;Iteration #4
[1 [&lt;span style=&quot;color: #0000ff;&quot;&gt;2&lt;/span&gt;] 3 [7 4 5] ] → [1 &lt;span style=&quot;color: #0000ff;&quot;&gt;2&lt;/span&gt; 3 [7 4 5] ]&lt;/p&gt;

&lt;p&gt;Iteration #5
[1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;7&lt;/span&gt; 4 5] ] → [1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;7&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt; 5] ] → [1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;7&lt;/span&gt; 4 &lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt;] ] → [ 1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;7&lt;/span&gt; 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt;] ] → [1 2 3 [&lt;strong&gt;5&lt;/strong&gt; 4 &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;7&lt;/span&gt;&lt;/strong&gt;] ]&lt;/p&gt;

&lt;p&gt;Iteration #6
[1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;5&lt;/span&gt; 4] 7] → [1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;5&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;4&lt;/span&gt;] 7] → [1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;5&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt;] 7]  → [1 2 3 [&lt;strong&gt;4&lt;/strong&gt; &lt;strong&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;5&lt;/span&gt;&lt;/strong&gt;] 7]&lt;/p&gt;

&lt;p&gt;Iteration #7
[1 2 3 [&lt;span style=&quot;color: #0000ff;&quot;&gt;4&lt;/span&gt;] [5] 7] → [1 2 3 &lt;span style=&quot;color: #0000ff;&quot;&gt;4&lt;/span&gt; [5] 7]&lt;/p&gt;

&lt;p&gt;Iteration #8
[1 2 3 4 [&lt;span style=&quot;color: #0000ff;&quot;&gt;5&lt;/span&gt;] 7] → [1 2 3 4 &lt;span style=&quot;color: #0000ff;&quot;&gt;5&lt;/span&gt; 7]&lt;/p&gt;

&lt;p&gt;For the sake of easiness I’ll skip list randomization step. Implementation of the quick sort heavily rely on sort and partition functions:&lt;/p&gt;

&lt;script src=&quot;http://gist-it.appspot.com/https://github.com/sergejusb/algorithms/blob/master/sorting/quickSort.js?footer=minimal&quot;&gt;
&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt; O(n·logn).&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Oct 2013 13:16:55 -0700</pubDate>
        <link>http://bebetterdeveloper/algorithms/sorting/sorting-quick-sort.html</link>
        <guid isPermaLink="true">http://bebetterdeveloper/algorithms/sorting/sorting-quick-sort.html</guid>
        
        <category>Quick Sort</category>
        
        
        <category>algorithms</category>
        
        <category>sorting</category>
        
      </item>
    
      <item>
        <title>Sorting: Merge Sort</title>
        <description>&lt;p&gt;In this post I will implement well known &lt;a href=&quot;http://en.wikipedia.org/wiki/Divide_and_conquer_algorithm&quot;&gt;divide and conquer&lt;/a&gt; sorting algorithm – &lt;a href=&quot;http://en.wikipedia.org/wiki/Merge_sort&quot;&gt;Merge Sort&lt;/a&gt;. The idea of the algorithm is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;recursively divide unsorted list into two sub-lists&lt;/li&gt;
  &lt;li&gt;continue until each sub-list contains 1 element&lt;/li&gt;
  &lt;li&gt;recursively merge them back in the right order&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can visualize merge sort algorithm by sorting following list [3 5 4 7 2 1]. I’ll use colors to specify &lt;span style=&quot;color: #0000ff;&quot;&gt;current split list&lt;/span&gt; and &lt;span style=&quot;color: #ff0000;&quot;&gt;current merge elements&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Split Iteration #1
&lt;span style=&quot;color: #0000ff;&quot;&gt;[3 5 4 7 2 1]&lt;/span&gt; → &lt;span style=&quot;color: #0000ff;&quot;&gt;[3 5 4]&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;[7 2 1]
&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;[3 5 4]&lt;/span&gt; [7 2 1] → &lt;span style=&quot;color: #0000ff;&quot;&gt;[3]&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;[5 4]&lt;/span&gt; [7 2 1]
&lt;span style=&quot;color: #0000ff;&quot;&gt;[3]&lt;/span&gt; [5 4] [7 2 1] → &lt;span style=&quot;color: #0000ff;&quot;&gt;[3]&lt;/span&gt; [5 4] [7 2 1]&lt;/p&gt;

&lt;p&gt;Merge Iteration #1
[&lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt;] [5 4] [7 2 1] → [&lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt;] [5 4] [7 2 1]&lt;/p&gt;

&lt;p&gt;Split Iteration #2
[3] &lt;span style=&quot;color: #0000ff;&quot;&gt;[5 4]&lt;/span&gt; [7 2 1] → [3] &lt;span style=&quot;color: #0000ff;&quot;&gt;[5]&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;[4]&lt;/span&gt; [7 2 1]&lt;/p&gt;

&lt;p&gt;Merge Interation #2
[3] [&lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt;] [&lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt;] [7 2 1] → [3] [&lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; …
[3] [&lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt;] [4] [7 2 1] → [3] [4 &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt;] [7 2 1]&lt;/p&gt;

&lt;p&gt;Merge Iteration #3
[&lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt;] [&lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; 5] [7 2 1] → [&lt;span style=&quot;color: #ff0000;&quot;&gt;3 &lt;/span&gt;…
[3] [&lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; 5] [7 2 1] → [3 &lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; …
[3] [4 &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt;] [7 2 1] → [3 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt;] [7 2 1]&lt;/p&gt;

&lt;p&gt;Split Iteration #3
[3 4 5] &lt;span style=&quot;color: #0000ff;&quot;&gt;[7 2 1]&lt;/span&gt; → [3 4 5] &lt;span style=&quot;color: #0000ff;&quot;&gt;[7]&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;[2 1]
&lt;/span&gt;[3 4 5] &lt;span style=&quot;color: #0000ff;&quot;&gt;[7]&lt;/span&gt; [2 1] → [3 4 5] &lt;span style=&quot;color: #0000ff;&quot;&gt;[7]&lt;/span&gt; [2 1]&lt;/p&gt;

&lt;p&gt;Merge Iteration #4
[3 4 5] [&lt;span style=&quot;color: #ff0000;&quot;&gt;7&lt;/span&gt;] [2 1] → [3 4 5] [&lt;span style=&quot;color: #ff0000;&quot;&gt;7&lt;/span&gt;] [2 1]&lt;/p&gt;

&lt;p&gt;Split Iteration #4
[3 4 5] [7] &lt;span style=&quot;color: #0000ff;&quot;&gt;[2 1]&lt;/span&gt; → [3 4 5] [7] &lt;span style=&quot;color: #0000ff;&quot;&gt;[2] [1]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Merge Iteration #5
[3 4 5] [7] [&lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt;] [&lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;] → [3 4 5] [7] [&lt;span style=&quot;color: #ff0000;&quot;&gt;1 &lt;/span&gt;…
[3 4 5] [7] [&lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt;] [1] → [3 4 5] [7] [1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt;]&lt;/p&gt;

&lt;p&gt;Merge Iteration #6
[3 4 5] [&lt;span style=&quot;color: #ff0000;&quot;&gt;7&lt;/span&gt;] [&lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 2] → [3 4 5] [&lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; …
[3 4 5] [&lt;span style=&quot;color: #ff0000;&quot;&gt;7&lt;/span&gt;] [1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt;] → [3 4 5] [1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; …
[3 4 5] [&lt;span style=&quot;color: #ff0000;&quot;&gt;7&lt;/span&gt;] [1 2] → [3 4 5] [1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;7&lt;/span&gt;]&lt;/p&gt;

&lt;p&gt;Merge Iteration #7
[&lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; 4 5] [&lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 2 7] → [&lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; …]
[&lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; 4 5] [1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; 7] → [1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; …]
[&lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; 4 5] [1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;7&lt;/span&gt;] → [1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; …]
[3 &lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; 5] [1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;7&lt;/span&gt;] → [1 2 3 &lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; …]
[3 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt;] [1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;7&lt;/span&gt;] → [1 2 3 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt; …]
[3 4 5] [1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;7&lt;/span&gt;] → [1 2 3 4 5 &lt;span style=&quot;color: #ff0000;&quot;&gt;7&lt;/span&gt;]&lt;/p&gt;

&lt;p&gt;Implementation of the merge sort heavily rely on sort and merge functions:&lt;/p&gt;

&lt;script src=&quot;http://gist-it.appspot.com/https://github.com/sergejusb/algorithms/blob/master/sorting/mergeSort.js?footer=minimal&quot;&gt;
&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt; O(n·logn).&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Sep 2013 15:03:20 -0700</pubDate>
        <link>http://bebetterdeveloper/algorithms/sorting/sorting-merge-sort.html</link>
        <guid isPermaLink="true">http://bebetterdeveloper/algorithms/sorting/sorting-merge-sort.html</guid>
        
        <category>Merge Sort</category>
        
        
        <category>algorithms</category>
        
        <category>sorting</category>
        
      </item>
    
      <item>
        <title>Sorting: Shell Sort</title>
        <description>&lt;p&gt;In this post I will implement more advanced sorting algorithm – &lt;a href=&quot;https://en.wikipedia.org/wiki/Shellsort&quot;&gt;Shell Sort&lt;/a&gt;. Shell sort is also known as n-gap insertion sort. Instead of comparing only adjacent pair, shell sort makes several passes and uses various gaps between adjacent elements (ending with the gap of 1 or classical insertion sort). The idea of the algorithm is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;calculate gaps by using one of the existing sequences, eg.: Shell’s (⌊n/2&lt;sup&gt;k&lt;/sup&gt;⌋), Pratt’s (2&lt;sup&gt;p&lt;/sup&gt;3&lt;sup&gt;q&lt;/sup&gt;) or in our case – Knuth’s ((3&lt;sup&gt;k&lt;/sup&gt; - 1) / 2) as being one of the most popular and due to sequence generation easiness&lt;/li&gt;
  &lt;li&gt;starting from the beginning of the list compare value with every n·gap elements on the left (if any)&lt;/li&gt;
  &lt;li&gt;swap their positions if they are not in the right order&lt;/li&gt;
  &lt;li&gt;continue until element on the left is smaller than current element&lt;/li&gt;
  &lt;li&gt;repeat with the smaller gap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can visualize shell sort algorithm by sorting following list [3 5 4 7 2 1] using gaps 4 and 1. I’ll use colors to specify &lt;span style=&quot;color: #ff0000;&quot;&gt;current adjacent pair&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Iteration #1, &lt;strong&gt;gap 4&lt;/strong&gt; : [3 5 4 7 2 1]
[&lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; 5 4 7 &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; 1] → [&lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; 5 4 7 &lt;span style=&quot;color: #ff0000;&quot;&gt;3&lt;/span&gt; 1]&lt;/p&gt;

&lt;p&gt;Iteration #2, &lt;strong&gt;gap 4&lt;/strong&gt; : [2 5 4 7 3 1]
[2 &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt; 4 7 3 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt;] → [2 &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 4 7 3 &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt;]&lt;/p&gt;

&lt;p&gt;Iteration #3, &lt;strong&gt;gap 1&lt;/strong&gt; : [2 1 4 7 3 5]
[&lt;span style=&quot;color: #ff0000;&quot;&gt;2 1&lt;/span&gt; 4 7 3 5] → [&lt;span style=&quot;color: #ff0000;&quot;&gt;1 2&lt;/span&gt; 4 7 3 5]&lt;/p&gt;

&lt;p&gt;Iteration #4, &lt;strong&gt;gap 1&lt;/strong&gt; : [1 2 4 7 3 5]
[1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2 4&lt;/span&gt; 7 3 5] → [1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2 4&lt;/span&gt; 7 3 5]&lt;/p&gt;

&lt;p&gt;Iteration #5, &lt;strong&gt;gap 1&lt;/strong&gt; : [1 2 4 7 3 5]
[1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;4 7&lt;/span&gt; 3 5] → [1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;4 7&lt;/span&gt; 3 5]&lt;/p&gt;

&lt;p&gt;Iteration #6, &lt;strong&gt;gap 1&lt;/strong&gt; : [1 2 4 7 3 5]
[1 2 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;7 3&lt;/span&gt; 5] → [1 2 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;3 7&lt;/span&gt; 5]
[1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;4 3&lt;/span&gt; 7 5] → [1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;3 4&lt;/span&gt; 7 5]
[1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2 3&lt;/span&gt; 4 7 5] → [1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2 3&lt;/span&gt; 4 7 5]&lt;/p&gt;

&lt;p&gt;Iteration #7, &lt;strong&gt;gap 1&lt;/strong&gt; : [1 2 3 4 7 5]
[1 2 3 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;7 5&lt;/span&gt;] → [1 2 3 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;5 7&lt;/span&gt;]
[1 2 3 &lt;span style=&quot;color: #ff0000;&quot;&gt;4 5&lt;/span&gt; 7] → [1 2 3 &lt;span style=&quot;color: #ff0000;&quot;&gt;4 5&lt;/span&gt; 7]&lt;/p&gt;

&lt;p&gt;Implementation of the shell sort is heavily based on the insertion sort:&lt;/p&gt;

&lt;script src=&quot;http://gist-it.appspot.com/https://github.com/sergejusb/algorithms/blob/master/sorting/shellSort.js?footer=minimal&quot;&gt;
&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt; O(n&lt;sup&gt;3/2&lt;/sup&gt;) using Knuth’s sequence.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Aug 2013 15:09:55 -0700</pubDate>
        <link>http://bebetterdeveloper/algorithms/sorting/sorting-shell-sort.html</link>
        <guid isPermaLink="true">http://bebetterdeveloper/algorithms/sorting/sorting-shell-sort.html</guid>
        
        <category>Shell Sort</category>
        
        
        <category>algorithms</category>
        
        <category>sorting</category>
        
      </item>
    
      <item>
        <title>Sorting: Insertion Sort</title>
        <description>&lt;p&gt;In this post I will implement another basic sorting algorithm – &lt;a href=&quot;https://en.wikipedia.org/wiki/Insertion_sort&quot;&gt;Insertion Sort&lt;/a&gt;. The idea of the algorithm is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;starting from the beginning of the list compare value with the elements on the left (if any)&lt;/li&gt;
  &lt;li&gt;swap their position if they are not in the right order&lt;/li&gt;
  &lt;li&gt;continue until element on the left is smaller than current element&lt;/li&gt;
  &lt;li&gt;after each iteration elements on the left from the current element are sorted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can visualize insertion sort algorithm by sorting following list [5 1 4 2 8]. I’ll use colors to specify &lt;span style=&quot;color: #ff0000;&quot;&gt;current adjacent pair&lt;/span&gt; and &lt;span style=&quot;color: #99cc00;&quot;&gt;already sorted elements&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Iteration #1 : &lt;span style=&quot;color: #ff0000;&quot;&gt;[5&lt;/span&gt; 1 4 2 8]&lt;/p&gt;

&lt;p&gt;Iteration #2 : [&lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt; 1 4 2 8]
[&lt;span style=&quot;color: #ff0000;&quot;&gt;5 1&lt;/span&gt; 4 2 8] → [&lt;span style=&quot;color: #ff0000;&quot;&gt;1 5&lt;/span&gt; 4 2 8]&lt;/p&gt;

&lt;p&gt;Iteration #3 : [&lt;span style=&quot;color: #99cc00;&quot;&gt;1 5&lt;/span&gt; 4 2 8]
[1 &lt;span style=&quot;color: #ff0000;&quot;&gt;5 4&lt;/span&gt; 2 8] → [1 &lt;span style=&quot;color: #ff0000;&quot;&gt;4 5&lt;/span&gt; 2 8]
[&lt;span style=&quot;color: #ff0000;&quot;&gt;1 4&lt;/span&gt; 5 2 8] → [&lt;span style=&quot;color: #ff0000;&quot;&gt;1 4&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt; 2 8]&lt;/p&gt;

&lt;p&gt;Iteration #4 : [&lt;span style=&quot;color: #99cc00;&quot;&gt;1 4 5&lt;/span&gt; 2 8]
[1 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;5 2&lt;/span&gt; 8] → [1 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;2 5&lt;/span&gt; 8]
[1 &lt;span style=&quot;color: #ff0000;&quot;&gt;4 2&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt; 8] → [1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2 4&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;5&lt;/span&gt; 8]
[&lt;span style=&quot;color: #ff0000;&quot;&gt;1 2&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;4 5&lt;/span&gt; 8] → [&lt;span style=&quot;color: #ff0000;&quot;&gt;1 2&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;4 5&lt;/span&gt; 8]&lt;/p&gt;

&lt;p&gt;Iteration #5 : [&lt;span style=&quot;color: #99cc00;&quot;&gt;1 2 4 5&lt;/span&gt; 8]
[1 2 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;5 8&lt;/span&gt;] → [1 2 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;5 8&lt;/span&gt;]&lt;/p&gt;

&lt;p&gt;Implementation of the insertion sort is very simple:&lt;/p&gt;

&lt;script src=&quot;http://gist-it.appspot.com/https://github.com/sergejusb/algorithms/blob/master/sorting/insertionSort.js?footer=minimal&quot;&gt;
&lt;/script&gt;

&lt;p&gt;Similarly to bubble and selection sorts we have two loops: outer and inner, so the average complexity is similar as well – O(n&lt;sup&gt;2&lt;/sup&gt;). For best-case scenario (already sorted elements) insertion sort has better complexity – O(n).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt; O(n&lt;sup&gt;2&lt;/sup&gt;).&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Aug 2013 13:00:36 -0700</pubDate>
        <link>http://bebetterdeveloper/algorithms/sorting/sorting-insertion-sort.html</link>
        <guid isPermaLink="true">http://bebetterdeveloper/algorithms/sorting/sorting-insertion-sort.html</guid>
        
        <category>Insertion Sort</category>
        
        
        <category>algorithms</category>
        
        <category>sorting</category>
        
      </item>
    
      <item>
        <title>Sorting: Selection Sort</title>
        <description>&lt;p&gt;In this post I will implement another well know sorting algorithm – &lt;a href=&quot;https://en.wikipedia.org/wiki/Selection_sort&quot;&gt;Selection Sort&lt;/a&gt;. The idea of the algorithm is quite simple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;divide input list into two parts: sorted (built up from left to right) and unsorted (remaining items to be sorted)&lt;/li&gt;
  &lt;li&gt;initially sorted part is empty and unsorted part contains input list&lt;/li&gt;
  &lt;li&gt;starting from the beginning of the unsorted part find the smallest element in the list&lt;/li&gt;
  &lt;li&gt;swap its position with the left most element in the unsorted part&lt;/li&gt;
  &lt;li&gt;after each iteration move sorted / unsorted boundary by one element to the right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can visualize selection sort algorithm by sorting following list [5 1 4 2 8]. I’ll use colors to specify &lt;span style=&quot;color: #3366ff;&quot;&gt;currently smallest unsorted element&lt;/span&gt;, &lt;span style=&quot;color: #ff0000;&quot;&gt;current unsorted element&lt;/span&gt; and &lt;span style=&quot;color: #99cc00;&quot;&gt;already sorted elements&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Iteration #1 : &lt;span style=&quot;color: #99cc00;&quot;&gt;[&lt;/span&gt;5 1 4 2 8]
&lt;span style=&quot;color: #99cc00;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt; 1 4 2 8] → &lt;span style=&quot;color: #99cc00;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #3366ff;&quot;&gt;5&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;1&lt;/span&gt; 4 2 8] → &lt;span style=&quot;color: #99cc00;&quot;&gt;[&lt;/span&gt;5 &lt;span style=&quot;color: #3366ff;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; 2 8] → &lt;span style=&quot;color: #99cc00;&quot;&gt;[&lt;/span&gt;5 &lt;span style=&quot;color: #3366ff;&quot;&gt;1&lt;/span&gt; 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; 8] → &lt;span style=&quot;color: #99cc00;&quot;&gt;[&lt;/span&gt;5 &lt;span style=&quot;color: #3366ff;&quot;&gt;1&lt;/span&gt; 4 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;8&lt;/span&gt;] → &lt;span style=&quot;color: #99cc00;&quot;&gt;[&lt;/span&gt;&lt;strong&gt;5&lt;/strong&gt; &lt;span style=&quot;color: #3366ff;&quot;&gt;1&lt;/span&gt; 4 2 8] → &lt;span style=&quot;color: #99cc00;&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #3366ff;&quot;&gt;1&lt;/span&gt; &lt;strong&gt;5&lt;/strong&gt; 4 2 8]&lt;/p&gt;

&lt;p&gt;Iteration #2 : [&lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; 5 4 2 8]
[&lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt; 4 2 8] → [&lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #3366ff;&quot;&gt;5&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; 2 8] → [&lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; 5 &lt;span style=&quot;color: #3366ff;&quot;&gt;4&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;2&lt;/span&gt; 8] → [&lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; 5 4 &lt;span style=&quot;color: #3366ff;&quot;&gt;2&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;8&lt;/span&gt;] → [&lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;strong&gt;5&lt;/strong&gt; 4 &lt;span style=&quot;color: #3366ff;&quot;&gt;2&lt;/span&gt; 8] → [&lt;span style=&quot;color: #99cc00;&quot;&gt;1&lt;/span&gt; &lt;span style=&quot;color: #3366ff;&quot;&gt;2&lt;/span&gt; 4 &lt;strong&gt;5&lt;/strong&gt; 8]&lt;/p&gt;

&lt;p&gt;Iteration #3 : [&lt;span style=&quot;color: #99cc00;&quot;&gt;1 2&lt;/span&gt; 4 5 8]
[&lt;span style=&quot;color: #99cc00;&quot;&gt;1 2&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt; 5 8] → [&lt;span style=&quot;color: #99cc00;&quot;&gt;1 2&lt;/span&gt; &lt;span style=&quot;color: #3366ff;&quot;&gt;4&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt; 8] → [&lt;span style=&quot;color: #99cc00;&quot;&gt;1 2&lt;/span&gt; &lt;span style=&quot;color: #3366ff;&quot;&gt;4&lt;/span&gt; 5 &lt;span style=&quot;color: #ff0000;&quot;&gt;8&lt;/span&gt;] → [&lt;span style=&quot;color: #99cc00;&quot;&gt;1 2&lt;/span&gt; &lt;span style=&quot;color: #3366ff;&quot;&gt;4&lt;/span&gt; 5 8]&lt;/p&gt;

&lt;p&gt;Iteration #4 : [&lt;span style=&quot;color: #99cc00;&quot;&gt;1 2 4&lt;/span&gt; 5 8]
[&lt;span style=&quot;color: #99cc00;&quot;&gt;1 2 4&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;5&lt;/span&gt; 8] → [&lt;span style=&quot;color: #99cc00;&quot;&gt;1 2 4&lt;/span&gt; &lt;span style=&quot;color: #3366ff;&quot;&gt;5&lt;/span&gt; &lt;span style=&quot;color: #ff0000;&quot;&gt;8&lt;/span&gt;] → [&lt;span style=&quot;color: #99cc00;&quot;&gt;1 2 4&lt;/span&gt; &lt;span style=&quot;color: #3366ff;&quot;&gt;5&lt;/span&gt; 8]&lt;/p&gt;

&lt;p&gt;Iteration #5 : [&lt;span style=&quot;color: #99cc00;&quot;&gt;1 2 4 5&lt;/span&gt; 8]&lt;/p&gt;

&lt;p&gt;Implementation of the selection sort is quit simple:&lt;/p&gt;

&lt;script src=&quot;http://gist-it.appspot.com/https://github.com/sergejusb/algorithms/blob/master/sorting/selectionSort.js?footer=minimal&quot;&gt;
&lt;/script&gt;

&lt;p&gt;As with bubble sort we have two loops: outer and inner. Outer loop is executed for each element (n times) and inner loop is executed for n/2 elements on average. As a result we have O(n&lt;sup&gt;2&lt;/sup&gt;/2) or just O(n&lt;sup&gt;2&lt;/sup&gt;) complexity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt; O(n&lt;sup&gt;2&lt;/sup&gt;).&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Aug 2013 10:14:51 -0700</pubDate>
        <link>http://bebetterdeveloper/algorithms/sorting/sorting-selection-sort.html</link>
        <guid isPermaLink="true">http://bebetterdeveloper/algorithms/sorting/sorting-selection-sort.html</guid>
        
        <category>Selection Sort</category>
        
        
        <category>algorithms</category>
        
        <category>sorting</category>
        
      </item>
    
      <item>
        <title>Sorting: Bubble Sort</title>
        <description>&lt;p&gt;In this post I will implement very basic sorting algorithm – &lt;a href=&quot;http://en.wikipedia.org/wiki/Bubble_sort&quot;&gt;Bubble Sort&lt;/a&gt;. The idea of the algorithm is very trivial:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;starting from the beginning of the list compare every adjacent pair&lt;/li&gt;
  &lt;li&gt;swap their position if they are not in the right order&lt;/li&gt;
  &lt;li&gt;after each iteration the last element is the biggest in the list&lt;/li&gt;
  &lt;li&gt;after each iteration one less element is needed to be compared&lt;/li&gt;
  &lt;li&gt;continue until there are no more elements left to be compared&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can visualize bubble sort algorithm by sorting following list [5 1 4 2 8]. I’ll use colors to specify &lt;span style=&quot;color: #ff0000;&quot;&gt;current adjacent pair&lt;/span&gt; and &lt;span style=&quot;color: #99cc00;&quot;&gt;already sorted elements&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Iteration #1 : [5 1 4 2 8&lt;span style=&quot;color: #99cc00;&quot;&gt;]&lt;/span&gt;
[&lt;span style=&quot;color: #ff0000;&quot;&gt;5 1&lt;/span&gt; 4 2 8] → [&lt;span style=&quot;color: #ff0000;&quot;&gt;1 5&lt;/span&gt; 4 2 8&lt;span style=&quot;color: #99cc00;&quot;&gt;]&lt;/span&gt;
[1 &lt;span style=&quot;color: #ff0000;&quot;&gt;5 4&lt;/span&gt; 2 8] → [1 &lt;span style=&quot;color: #ff0000;&quot;&gt;4 5&lt;/span&gt; 2 8&lt;span style=&quot;color: #99cc00;&quot;&gt;]&lt;/span&gt;
[1 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;5 2&lt;/span&gt; 8] → [1 4 &lt;span style=&quot;color: #ff0000;&quot;&gt;2 5&lt;/span&gt; 8&lt;span style=&quot;color: #99cc00;&quot;&gt;]&lt;/span&gt;
[1 4 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;5 8&lt;/span&gt;] → [1 4 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;5 8&lt;/span&gt;&lt;span style=&quot;color: #99cc00;&quot;&gt;]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Iteration #2 : [1 4 2 5 &lt;span style=&quot;color: #99cc00;&quot;&gt;8&lt;/span&gt;]
[&lt;span style=&quot;color: #ff0000;&quot;&gt;1 4&lt;/span&gt; 2 5 &lt;span style=&quot;color: #99cc00;&quot;&gt;8&lt;/span&gt;] → [&lt;span style=&quot;color: #ff0000;&quot;&gt;1 4&lt;/span&gt; 2 5 &lt;span style=&quot;color: #99cc00;&quot;&gt;8&lt;/span&gt;]
[1 &lt;span style=&quot;color: #ff0000;&quot;&gt;4 2&lt;/span&gt; 5 &lt;span style=&quot;color: #99cc00;&quot;&gt;8&lt;/span&gt;] → [1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2 4&lt;/span&gt; 5 &lt;span style=&quot;color: #99cc00;&quot;&gt;8&lt;/span&gt;]
[1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;4 5&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;8&lt;/span&gt;] → [1 2 &lt;span style=&quot;color: #ff0000;&quot;&gt;4 5&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;8&lt;/span&gt;]&lt;/p&gt;

&lt;p&gt;Iteration #3 : [1 2 4 &lt;span style=&quot;color: #99cc00;&quot;&gt;5 8&lt;/span&gt;]
[&lt;span style=&quot;color: #ff0000;&quot;&gt;1 2&lt;/span&gt; 4 &lt;span style=&quot;color: #99cc00;&quot;&gt;5 8&lt;/span&gt;] → [&lt;span style=&quot;color: #ff0000;&quot;&gt;1 2&lt;/span&gt; 4 &lt;span style=&quot;color: #99cc00;&quot;&gt;5 8&lt;/span&gt;]
[1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2 4&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;5 8&lt;/span&gt;] → [1 &lt;span style=&quot;color: #ff0000;&quot;&gt;2 4&lt;/span&gt; &lt;span style=&quot;color: #99cc00;&quot;&gt;5 8&lt;/span&gt;]&lt;/p&gt;

&lt;p&gt;Iteration #4 : [1 2 &lt;span style=&quot;color: #99cc00;&quot;&gt;4 5 8&lt;/span&gt;]
[&lt;span style=&quot;color: #ff0000;&quot;&gt;1 2&lt;/span&gt; 4 5 8] → [&lt;span style=&quot;color: #ff0000;&quot;&gt;1 2&lt;/span&gt; 4 5 8]&lt;/p&gt;

&lt;p&gt;Iteration #5 : [1 &lt;span style=&quot;color: #99cc00;&quot;&gt;2 4 5 8&lt;/span&gt;]&lt;/p&gt;

&lt;p&gt;Implementation of the bubble sort is quit simple:&lt;/p&gt;

&lt;script src=&quot;http://gist-it.appspot.com/https://github.com/sergejusb/algorithms/blob/master/sorting/bubbleSort.js?footer=minimal&quot;&gt;
&lt;/script&gt;

&lt;p&gt;As you can see we have two loops: outer and inner. Outer loop is executed for each element (n times) and inner loop is executed for n/2 elements on average. As a result we have O(n&lt;sup&gt;2&lt;/sup&gt;/2) or just O(n&lt;sup&gt;2&lt;/sup&gt;) complexity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complexity:&lt;/strong&gt; O(n&lt;sup&gt;2&lt;/sup&gt;).&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Aug 2013 11:25:31 -0700</pubDate>
        <link>http://bebetterdeveloper/algorithms/sorting/sorting-bubble-sort.html</link>
        <guid isPermaLink="true">http://bebetterdeveloper/algorithms/sorting/sorting-bubble-sort.html</guid>
        
        <category>Bubble Sort</category>
        
        
        <category>algorithms</category>
        
        <category>sorting</category>
        
      </item>
    
  </channel>
</rss>
